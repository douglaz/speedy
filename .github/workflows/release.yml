name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: Build Linux Binary
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Build x86_64 Linux (musl - static)
        run: |
          nix build
          mkdir -p artifacts/linux-x86_64-static
          cp result/bin/speedy artifacts/linux-x86_64-static/
          chmod +x artifacts/linux-x86_64-static/speedy
          # Verify it's actually static
          file artifacts/linux-x86_64-static/speedy
          ldd artifacts/linux-x86_64-static/speedy 2>&1 | grep -q "not a dynamic executable" && echo "âœ“ Static binary" || exit 1
      
      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            (cd "$dir" && sha256sum speedy > speedy.sha256)
          done
      
      - name: Create archives
        run: |
          cd artifacts
          for dir in */; do
            dirname="${dir%/}"
            tar czf "speedy-${dirname}.tar.gz" "$dirname"
          done
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: speedy-linux-binaries
          path: artifacts/*.tar.gz
          retention-days: 30

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-
      
      - name: Build x86_64 macOS
        run: |
          cargo build --release --target x86_64-apple-darwin
          mkdir -p artifacts/macos-x86_64
          cp target/x86_64-apple-darwin/release/speedy artifacts/macos-x86_64/
          chmod +x artifacts/macos-x86_64/speedy
      
      - name: Build ARM64 macOS (Apple Silicon)
        run: |
          cargo build --release --target aarch64-apple-darwin
          mkdir -p artifacts/macos-aarch64
          cp target/aarch64-apple-darwin/release/speedy artifacts/macos-aarch64/
          chmod +x artifacts/macos-aarch64/speedy
      
      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            (cd "$dir" && shasum -a 256 speedy > speedy.sha256)
          done
      
      - name: Create archives
        run: |
          cd artifacts
          for dir in */; do
            dirname="${dir%/}"
            tar czf "speedy-${dirname}.tar.gz" "$dirname"
          done
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: speedy-macos-binaries
          path: artifacts/*.tar.gz
          retention-days: 30

  build-windows:
    name: Build Windows Binary
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-
      
      - name: Build x86_64 Windows
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
          New-Item -ItemType Directory -Force -Path artifacts/windows-x86_64
          Copy-Item target/x86_64-pc-windows-msvc/release/speedy.exe artifacts/windows-x86_64/
      
      - name: Create checksums
        shell: powershell
        run: |
          cd artifacts
          Get-ChildItem -Directory | ForEach-Object {
            cd $_.Name
            $hash = Get-FileHash -Algorithm SHA256 speedy.exe
            "$($hash.Hash.ToLower())  speedy.exe" | Out-File -Encoding ASCII speedy.sha256
            cd ..
          }
      
      - name: Create ZIP archives
        shell: powershell
        run: |
          cd artifacts
          Get-ChildItem -Directory | ForEach-Object {
            Compress-Archive -Path $_.FullName -DestinationPath "speedy-$($_.Name).zip"
          }
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: speedy-windows-binaries
          path: artifacts/*.zip
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: release-artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          mv release-artifacts/speedy-linux-binaries/* release-files/
          mv release-artifacts/speedy-macos-binaries/* release-files/
          mv release-artifacts/speedy-windows-binaries/* release-files/
          ls -la release-files/
      
      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Speedy ${{ steps.version.outputs.version }}
          
          A powerful command-line video processing tool built with Rust and FFmpeg.
          
          ### Installation
          
          #### Prerequisites
          - FFmpeg must be installed on your system
          - Download FFmpeg from: https://ffmpeg.org/download.html
          
          #### Binary Downloads
          
          Choose the appropriate binary for your platform:
          
          **Linux:**
          - `speedy-linux-x86_64-static.tar.gz` - Fully static binary (works on all Linux distros, no dependencies)
          
          **macOS:**
          - `speedy-macos-x86_64.tar.gz` - Intel Mac binary
          - `speedy-macos-aarch64.tar.gz` - Apple Silicon (M1/M2/M3) binary
          
          **Windows:**
          - `speedy-windows-x86_64.zip` - Windows 64-bit executable
          
          ### Installation Instructions
          
          **Linux/macOS:**
          ```bash
          # Extract the archive
          tar xzf speedy-<platform>.tar.gz
          
          # Make executable
          chmod +x speedy-<platform>/speedy
          
          # Move to PATH (optional)
          sudo mv speedy-<platform>/speedy /usr/local/bin/
          
          # Verify installation
          speedy --help
          ```
          
          **Windows:**
          1. Extract the ZIP file
          2. Add the directory to your PATH or move `speedy.exe` to a directory in your PATH
          3. Open Command Prompt or PowerShell and run: `speedy --help`
          
          ### Verify Checksums
          
          Each archive contains a `.sha256` file with the binary's checksum.
          
          ```bash
          # Linux/macOS
          cd speedy-<platform>/
          sha256sum -c speedy.sha256
          
          # Windows (PowerShell)
          cd speedy-windows-x86_64/
          Get-FileHash speedy.exe -Algorithm SHA256
          ```
          
          ### Features
          
          - Speed adjustment with automatic audio pitch correction
          - Advanced color grading (vibrance, curves, color balance)
          - Hardware acceleration support
          - Multiple codec support (H.264, H.265, VP9, AV1, ProRes)
          - Video stabilization and denoising
          - Smart presets for common workflows (DJI drones, GoPro, social media)
          
          ### Quick Start
          
          ```bash
          # Speed up a video 2x
          speedy -i input.mp4 -o output.mp4 --speed 2.0
          
          # Apply a preset for DJI D-Log footage
          speedy -i drone.mp4 -o processed.mp4 --preset dji-dlog
          
          # List all available presets
          speedy --list-presets
          ```
          
          ### Documentation
          
          For full documentation, visit: https://github.com/yourusername/speedy
          
          EOF
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --title "Speedy ${{ steps.version.outputs.version }}" \
            --notes-file release-notes.md \
            release-files/*