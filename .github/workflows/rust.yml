name: Rust CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      # Only cache cargo registry (dependencies), not target directory
      # Target caching conflicts with nix environment and multiple build targets
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-
      
      - name: Check formatting
        run: nix develop -c cargo fmt --check
      
      - name: Run clippy
        run: nix develop -c cargo clippy -- -D warnings
      
      - name: Check workspace
        run: nix develop -c cargo check --workspace

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-
      
      - name: Run tests
        run: nix develop -c cargo test --workspace
      
      - name: Build with nix (static musl binary)
        run: nix build
      
      - name: Verify static linking
        run: |
          file ./result/bin/speedy
          ldd ./result/bin/speedy 2>&1 | grep -q "not a dynamic executable" && echo "✓ Static binary confirmed" || echo "✗ Not a static binary"
      
      - name: Test CLI help
        run: ./result/bin/speedy --help
      
      - name: Test list presets
        run: ./result/bin/speedy --list-presets

  test-cross-platform:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ffmpeg
      
      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg -y
          echo "C:\ProgramData\chocolatey\lib\ffmpeg\tools\ffmpeg\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-
      
      - name: Build
        run: cargo build --workspace --release
      
      - name: Run tests
        run: cargo test --workspace
      
      - name: Test CLI (Unix)
        if: matrix.os != 'windows-latest'
        run: ./target/release/speedy --help
      
      - name: Test CLI (Windows)
        if: matrix.os == 'windows-latest'
        run: .\target\release\speedy.exe --help

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Install cargo-audit
        run: nix develop -c cargo install cargo-audit
      
      - name: Run security audit
        run: nix develop -c cargo audit